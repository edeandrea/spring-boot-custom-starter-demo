plugins {
	id 'org.springframework.boot' version '2.1.6.RELEASE'
	id "com.gorylenko.gradle-git-properties" version "2.0.0"
	id 'java'
}

apply plugin: 'io.spring.dependency-management'

ext {
	swaggerVersion = '1.5.22'
}

group = 'com.github.edeandrea'
version = '1.0'
sourceCompatibility = '1.8'

repositories {
	mavenCentral()
}

springBoot {
	buildInfo()
}

generateGitProperties {
	onlyIf {
		!source.isEmpty()
	}
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-webflux'
	implementation 'com.mycompany.myframework:custom-spring-boot-starter:1.0'
	implementation "io.swagger:swagger-annotations:$swaggerVersion"
	implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-xml'
	implementation 'org.apache.commons:commons-lang3:3.9'
	compileOnly 'org.springframework.boot:spring-boot-configuration-processor'
	runtime 'org.springframework.boot:spring-boot-starter-security'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.junit.jupiter:junit-jupiter-api'
	testImplementation 'org.junit.jupiter:junit-jupiter-params'
	testImplementation 'io.projectreactor:reactor-test'
	testRuntime 'org.junit.jupiter:junit-jupiter-engine'
}

test {
	useJUnitPlatform()
}

configurations.all {
	resolutionStrategy {
		eachDependency { dependency ->
			def groupId = dependency.requested.group
			def artifactId = dependency.requested.name

			if ((groupId == 'io.swagger') && (artifactId in ['swagger-annotations', 'swagger-models', 'swagger-mule', 'swagger-core', 'swagger-jaxrs', 'swagger-jersey2-jaxrs', 'swagger-jersey-jaxrs', 'swagger-hibernate-validations', 'swagger-servlet'])) {
				dependency.useVersion swaggerVersion
				dependency.because "Transitive dependency needs to match requested version $swaggerVersion"
			}
		}

		dependencySubstitution {
			substitute module('com.mycompany.myframework:custom-spring-boot-starter:1.0') with project(':custom-spring-boot-starter')
		}
	}
}
